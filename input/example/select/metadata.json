{
    "componentName": "Select",
    "componentOverview": {
        "description": "The Select component is a versatile dropdown menu that allows users to select one or multiple options from a list. It can be customized with different sizes, styles, and states (e.g., disabled, loading).",
        "whenToUse": "Use the Select component when you need users to choose from a predefined set of options, such as selecting a category, filtering results, or choosing preferences."
    },
    "installationInstructions": {
        "npm": "npm install @your-library/select",
        "yarn": "yarn add @your-library/select",
        "pnpm": "pnpm add @your-library/select",
        "globalDependencies": null
    },
    "importInstructions": {
        "individualImport": "import { Select } from '@your-library/select';",
        "globalImport": "import { Select } from '@your-library/react';"
    },
    "usageExamples": {
        "basicExample": "<Select options={['Option 1', 'Option 2', 'Option 3']} />",
        "multiSelect": "<Select options={['Option 1', 'Option 2', 'Option 3']} isMulti />",
        "disabledState": "<Select options={['Option 1', 'Option 2']} isDisabled />",
        "loadingState": "<Select options={[]} isLoading />"
    },
    "customizationAndTheming": {
        "example": "<Select className='border-blue-500 focus:border-blue-700' options={['Option 1', 'Option 2']} />",
        "theming": "You can customize the Select component using CSS classes or CSS-in-JS solutions. Apply custom styles by passing class names to override the default theme."
    },
    "accessibilityGuidelines": {
        "ariaRole": "listbox",
        "keyboardNavigation": "Supports navigation via Arrow keys, Enter to select, and Esc to close the dropdown.",
        "focusManagement": "The select has proper focus management and visible focus state, ensuring accessibility for keyboard users.",
        "screenReaderCompatibility": "The component provides screen reader compatibility, announcing the selected option and available choices."
    },
    "bestPractices": [
        "Provide a clear label for the select component to indicate its purpose.",
        "Limit the number of options for a better user experience.",
        "Use the loading state when fetching options asynchronously."
    ],
    "componentStatesAndEdgeCases": {
        "emptyState": "<Select options={[]} placeholder='No options available' />",
        "errorState": "<Select options={['Option 1']} className='border-red-500' />",
        "longOptions": "<Select options={['This is a very long option that might overflow', 'Option 2']} />"
    },
    "testingGuidelines": {
        "unitTesting": "jest select.test.js",
        "endToEndTesting": "cypress run"
    }
}